{"version":3,"sources":["BooksAPI.js","components/ShelfMover.js","components/Book.js","components/Utilities.js","components/BookModal.js","components/Search.js","components/BookShelf.js","components/Bookshelves.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","maxResults","ShelfMover","state","shelfSelection","_this","props","onChangeShelf","setState","componentWillReceiveProps","render","react_default","a","createElement","className","value","onChange","e","target","disabled","Component","Book","shelfPicker","bookAuthors","authors","join","imgUrl","imageLinks","thumbnail","onClick","onUpdateQuickView","style","width","height","backgroundImage","components_ShelfMover","title","sortBooks","list","sort","b","firstTitle","toUpperCase","secondTitle","mergeShelfAndSearch","hashTable","forEach","BookModal","isShowingModal","showModal","handleClose","onCloseModal","buildAuthors","Array","isArray","map","author","key","url","lib","onClose","length","pageCount","infoLink","href","rel","Search","quickView","queryTimer","changeQuery","clearTimeout","setTimeout","updateSearch","BooksAPI","response","newList","newError","undefined","error","Utilities","selectedBooks","updateQuickView","closeQuickView","Link","to","type","placeholder","components_Book","components_BookModal","Bookshelf","name","Bookshelves","componentDidMount","onRefreshAllBooks","updateShelves","filter","preventDefault","shelves","BookShelf","BooksApp","booksArray","newBook","shelfRefresh","bookAdded","changeShelf","slice","listBook","push","Route","exact","path","components_Bookshelves","components_Search","React","ReactDOM","BrowserRouter","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d049b35a.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query, maxResults })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, {Component} from 'react';\n\nclass ShelfMover extends Component {\n\n    state = {\n        shelfSelection: this.props.book.shelf || \"none\"\n    }\n\n    onChangeShelf = (book, shelf) => {\n        this.setState({shelfSelection: shelf});\n        this\n            .props\n            .onChangeShelf(book, shelf);\n    }\n\n    componentWillReceiveProps = (props) => {\n        this.props = props;\n        this.setState({shelfSelection: this.props.book.shelf});\n    }\n\n    render = () => {\n        return (\n            <div className=\"book-shelf-changer\">\n                <select\n                    value={this.state.shelfSelection}\n                    onChange={(e) => this.onChangeShelf(this.props.book, e.target.value)}>\n                    <option value=\"\" disabled>Move to...</option>\n                    <option value=\"currentlyReading\">Currently Reading</option>\n                    <option value=\"wantToRead\">Want to Read</option>\n                    <option value=\"read\">Read</option>\n                    <option value=\"none\">None</option>\n                </select>\n            </div>\n        )\n    }\n}\n\nexport default ShelfMover;","import React, {Component} from 'react';\nimport ShelfMover from './ShelfMover';\n\nclass Book extends Component {\n\n    state = {\n        shelfPicker: this.props.book.shelf || \"none\"\n    }\n\n    render = () => {\n        const bookAuthors = this.props.book.authors && this.props.book.authors.join(' | ');\n\n        // Create thumbnail url\n        let imgUrl = (this.props.book.imageLinks && `url(${this.props.book.imageLinks.thumbnail})`);\n\n        return (\n            <div className=\"book\">\n                <div className=\"book-top\">\n                    <button className=\"book-cover-button\" onClick={(e) => this.props.onUpdateQuickView(e, this.props.book)}>\n                        <div\n                            className=\"book-cover\"\n                            style={{\n                            width: 128,\n                            height: 193,\n                            backgroundImage: imgUrl\n                        }}></div>\n                    </button>\n                    <ShelfMover book={this.props.book} onChangeShelf={this.props.onChangeShelf} />\n                </div>\n                <div className=\"book-title\">{this.props.book.title}</div>\n                <div className=\"book-authors\">{bookAuthors}</div>\n            </div>\n        )\n    }\n}\n\nexport default Book;","export const sortBooks = (list) => {\n  // Sort the list of books\n  const newList = list.sort(function (a, b) {\n    const firstTitle = a\n      .title\n      .toUpperCase();\n    const secondTitle = b\n      .title\n      .toUpperCase();\n    if (firstTitle < secondTitle) {\n      return -1;\n    }\n    if (firstTitle > secondTitle) {\n      return 1;\n    }\n    return 0;\n  })\n\n  return newList;\n}\n\nexport const mergeShelfAndSearch = (shelf, search) => {\n  const hashTable = {};\n  shelf.forEach(book => hashTable[book.id] = book.shelf);\n\n  search.forEach(book => {\n      book.shelf = hashTable[book.id] || 'none';\n  });\n\n  return search;\n}","import React, {Component} from 'react';\nimport {ModalContainer, ModalDialog} from 'react-modal-dialog';\nimport ShelfMover from './ShelfMover';\n\nclass BookModal extends Component {\n\n    state = {\n        shelfPicker: this.props.book.shelf || \"none\",\n        isShowingModal: false,\n        book: this.props.book\n    }\n\n    componentWillReceiveProps = (props) => {\n        this.props = props;\n        this.setState({\n            isShowingModal: props.showModal,\n            book: props.book,\n            shelfPicker: this.props.book.shelf || \"none\"\n        });\n    }\n\n    handleClose = () => {\n        this.setState({isShowingModal: false, book: {}});\n        this\n            .props\n            .onCloseModal();\n    }\n\n    buildAuthors = () => {\n        const authors = this.props.book.authors;\n\n        // check for authors\n        if (!Array.isArray(authors)) \n            return null;\n        // else create new ones\n        return (\n            <ol>\n                {authors.map(author => (\n                    <li key={author}>{author}</li>\n                ))}\n            </ol>\n        )\n    }\n\n    render = () => {\n        // Create thumbnail url\n        let url = (this.props.book.imageLinks && `url(${this.props.book.imageLinks.thumbnail})`);\n\n        return (\n            <div>\n                {this.state.isShowingModal && <ModalContainer onClose={this.handleClose}>\n                    <ModalDialog onClose={this.handleClose}>\n                        <div className=\"book-quick-view\">\n                            <div className=\"book-title\">\n                                <h2>{this.props.book.title}</h2>\n                            </div>\n                            <div className=\"book-quick-view-details\">\n                                <div className=\"book-left\">\n                                    <div\n                                        className=\"book-cover\"\n                                        style={{\n                                        width: 128,\n                                        height: 193,\n                                        backgroundImage: url\n                                    }}></div>\n                                </div>\n                                <div className=\"book-right\">\n                                    {this.props.book.authors.length === 1 && <h3>Author</h3>}\n                                    {this.props.book.authors.length > 1 && <h3>Authors</h3>}\n                                    <div className=\"book-authors\">{this.buildAuthors()}</div>\n                                    <div className=\"book-pages\">{this.props.book.pageCount && <span>{this.props.book.pageCount}&nbsp; pages</span>}</div>\n                                    <div className=\"book-info-link\">\n                                        {this.props.book.infoLink && <a href={this.props.book.infoLink} target=\"_blank\" rel=\"noopener noreferrer\">See more details</a>}\n                                    </div>\n                                    <ShelfMover book={this.props.book} onChangeShelf={this.props.onChangeShelf} />\n                                </div>\n                            </div>\n                        </div>\n                    </ModalDialog>\n                </ModalContainer>}\n            </div>\n        )\n    }\n}\n\nexport default BookModal;","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport * as BooksAPI from '../BooksAPI';\nimport Book from './Book';\nimport * as Utilities from './Utilities';\nimport BookModal from './BookModal';\n\nclass Search extends Component {\n\n    state = {\n        query: \"\",\n        books: [],\n        quickView: {},\n        showModal: false\n    };\n\n    queryTimer = null;\n\n    changeQuery = (value) => {\n        // Update the query then wait a quarter second before actually executing the\n        // search\n        clearTimeout(this.queryTimer);\n        this.setState({query: value});\n        this.queryTimer = setTimeout(this.updateSearch, 250);\n    }\n\n    updateSearch = () => {\n        // Never search on an empty string\n        if (this.state.query === \"\") {\n            this.setState({error: false, books: []});\n            return;\n        }\n\n        // Execute the search on the query string and then process the response\n        BooksAPI\n            .search(this.state.query)\n            .then(response => {\n                let newList = [];\n                let newError = false;\n                // Check that there wasn't an error, then check whether there are books in the\n                // return, and finally act as if there were no books matching the search if all\n                // else fails\n                if (response === undefined || (response.error && response.error !== \"empty query\")) {\n                    newError = true;\n                } else if (response.length) {\n                    // Check the list of books the user already has on their shelves against the\n                    // search results and apply shelf data accordingly\n                    newList = Utilities.mergeShelfAndSearch(this.props.selectedBooks, response);\n                    newList = Utilities.sortBooks(newList);\n                }\n\n                // Set the state based on the new response\n                this.setState({error: newError, books: newList});\n            })\n    }\n\n    componentWillReceiveProps = (props) => {\n        // Re-merge and sort the shelf and search lists and set the state\n        this.props = props;\n        let newList = Utilities.mergeShelfAndSearch(this.props.selectedBooks, this.state.books);\n        newList = Utilities.sortBooks(newList);\n        this.setState({books: newList});\n    }\n\n    updateQuickView = (e, book) => {\n        // New book for a quick view\n        this.setState({quickView: book, showModal: true});\n    }\n\n    closeQuickView = () => {\n        this.setState({quickView: {}, showModal: false});\n    }\n\n    render = () => {\n        return (\n            <div>\n                <div className=\"search-books\">\n                    <div className=\"search-books-bar\">\n                        <Link className=\"close-search\" to='/'>Close</Link>\n                        <div className=\"search-books-input-wrapper\">\n                            {/*\n                NOTES: The search from BooksAPI is limited to a particular set of search terms.\n                You can find these search terms here:\n                https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n                However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n                you don't find a specific author or title. Every search is limited by search terms.\n              */}\n                            <input\n                                type=\"text\"\n                                placeholder=\"Search by title or author\"\n                                onChange={(e) => this.changeQuery(e.target.value)}\n                                value={this.state.query.value}/>\n\n                        </div>\n                    </div>\n                    <div className=\"search-books-results\">\n                        {this.state.error && (\n                            <div className=\"search-error\">\n                                There was a problem with your search</div>\n                        )}\n                        {!this.state.error && (\n                            <span className=\"search-count\">\n                                we have {this.state.books.length}&nbsp;books on your search \n                            </span>\n                        )}\n                        <ol className=\"books-grid\">\n                            {this.state.books && this\n                                .state\n                                .books\n                                .map(book => (\n                                    <li key={book.id}>\n                                        <Book\n                                            book={book}\n                                            onChangeShelf={this.props.onChangeShelf}\n                                            onUpdateQuickView={this.updateQuickView}/>\n                                    </li>\n                                ))}\n                        </ol>\n                    </div>\n                    <div className=\"search-quick-view\">\n                        <BookModal\n                            book={this.state.quickView}\n                            showModal={this.state.showModal}\n                            onCloseModal={this.closeQuickView}\n                            onChangeShelf={this.props.onChangeShelf}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Search;","import React, {Component} from 'react';\nimport Book from './Book';\n\nclass Bookshelf extends Component {\n\n    render = () => {\n        return (\n            <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">{this.props.shelf.name}</h2>\n                <div className=\"bookshelf-books\">\n                    <ol className=\"books-grid\">\n                        {this\n                            .props\n                            .shelf\n                            .books\n                            .map(book => (\n                                <li key={book.id}>\n                                    <Book\n                                        book={book}\n                                        onChangeShelf={this.props.onChangeShelf}\n                                        onUpdateQuickView={this.props.onUpdateQuickView}/>\n                                </li>\n                            ))}\n                    </ol>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Bookshelf;","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport BookShelf from './BookShelf';\nimport BookModal from './BookModal';\n\nclass Bookshelves extends Component {\n\n    state = {\n        quickView: {}\n    };\n\n    componentDidMount = () => {\n        // Update the list of books\n        this\n            .props\n            .onRefreshAllBooks();\n    }\n\n    updateShelves = () => {\n       // update shelves\n        const currentlyReadingNew = {\n            name: \"Currently Reading\",\n            books: this\n                .props\n                .books\n                .filter(book => book.shelf === 'currentlyReading')\n        };\n        const wantToReadNew = {\n            name: \"Want to Read\",\n            books: this\n                .props\n                .books\n                .filter(book => book.shelf === \"wantToRead\")\n        };\n        const readBooksNew = {\n            name: \"Read\",\n            books: this\n                .props\n                .books\n                .filter(book => book.shelf === \"read\")\n        };\n\n        return ([currentlyReadingNew, wantToReadNew, readBooksNew]);\n    }\n\n    updateQuickView = (e, book) => {\n        e.preventDefault();\n        // New book for a quick view\n        this.setState({quickView: book, showModal: true});\n    }\n\n    closeQuickView = () => {\n        this.setState({quickView: {}, showModal: false});\n    }\n\n    render = () => {\n        let shelves = [];\n        if (this.props.books && this.props.books.length) \n            shelves = this.updateShelves();\n        return (\n            <div>\n                <div className=\"list-books\">\n                    <div className=\"list-books-title\">\n                        <h1>MyReads</h1>\n                    </div>\n                    <div className=\"list-books-content\">\n                        <div>\n                            {shelves && shelves.map((shelf) => (<BookShelf\n                                key={shelf.name}\n                                shelf={shelf}\n                                onChangeShelf={this.props.onChangeShelf}\n                                onUpdateQuickView={this.updateQuickView}/>))}\n                        </div>\n                    </div>\n                    <div className=\"open-search\">\n                        <Link to='/search'>Add a book</Link>\n                    </div>\n                </div>\n                <div className=\"shelves-quick-view\">\n                    <BookModal\n                        book={this.state.quickView}\n                        showModal={this.state.showModal}\n                        onCloseModal={this.closeQuickView}\n                        onChangeShelf={this.props.onChangeShelf}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Bookshelves;","import React from 'react';\nimport * as BooksAPI from './BooksAPI';\nimport './App.css';\nimport {Route} from 'react-router-dom';\nimport Search from './components/Search';\nimport Bookshelves from './components/Bookshelves';\nimport * as Utilities from './components/Utilities';\n\n\nclass BooksApp extends React.Component {\n  state = {\n    booksArray: [],\n    newBook: true\n  }\n\n  componentDidMount = () => {\n    if (this.state.newBook) {\n      this.shelfRefresh();\n    }\n  }\n\n  shelfRefresh = () => {\n    // Get the books currently on the bookshelves and update the state with the\n    // returned, sorted list\n    BooksAPI\n      .getAll()\n      .then((list) => {\n        this.setState({\n          books: Utilities.sortBooks(list),\n          newBook: false\n        });\n      });\n  }\n\n  bookAdded = () => {\n    this.setState({\"newBook\": true});\n  }\n\n  changeShelf = (book, shelf) => {\n    // Make the call to the service to update the shelf for the selected book to the\n    // newly selected shelf\n    BooksAPI\n      .update(book, shelf)\n      .then(response => {\n        // Update the state of the book. Start with a copy of the list of books.\n        let newList = this\n          .state\n          .books\n          .slice(0);\n        // Look for the book in the list. It might not be there yet.\n        const books = newList.filter(listBook => listBook.id === book.id);\n        if (books.length) {\n          // Update the book that's already on the shelf\n          books[0].shelf = shelf;\n        } else {\n          // Add the book to the shelf and sort the list of books again\n          newList.push(book);\n          newList = Utilities.sortBooks(newList);\n        }\n        // Update the state with the newList\n        this.setState({books: newList});\n      })\n  }\n\n  render = () => {\n    return (\n      <div className=\"app\">\n        <Route\n          exact\n          path='/'\n          render={(() => (<Bookshelves\n          books={this.state.books}\n          onChangeShelf={this.changeShelf}\n          onRefreshAllBooks={this.shelfRefresh}/>))}/>\n\n        <Route\n          exact\n          path='/search'\n          render={(() => (<Search selectedBooks={this.state.books} onChangeShelf={this.changeShelf} />))}/>\n\n      </div>\n    )\n  }\n}\n\nexport default BooksApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport {BrowserRouter} from 'react-router-dom';\n\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'))\n"],"sourceRoot":""}